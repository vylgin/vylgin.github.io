---
layout: post
title: "Создание блога на github с помощью octopress"
date: 2014-01-09 15:13:50 +0400
comments: true
categories: [octopress, github]
---

Octopress — это фреймворк, позволяющий генерировать статические HTML сайты с помощью Jekyll. Каждый, кто начинает вести свой блог на нем, пишет подобную статью, это уже стало традицией. В этой статье я опущу то, как установить ruby, rvm, завести акканут на гитхабе, настроить ssh-ключи и т.д., в интернете полно статей об этом. Я акцентирую внимание на более интересных деталях.

<!-- more -->

### Цель
Моя цель - создать собственный блог с минимальными временными и материальными вложениями на своем домене (http://blog.vylgin.pro). Можно завести блог бесплатно, но он будет доступен по адресу http://*username*.github.io, где *username* - это имя пользователя на гитхабе.

### Установка Octopress+GitHub Pages
Первым делом необходимо установить сам octopress, клонировав репозитарий в каталог, где будут находиться исходные файлы:
	git clone git://github.com/imathis/octopress.git octopress
	cd octopress
	bundle install
В этот момент возникла ошибка о том, что не установлен пакет fast-stemmer версии 1.0.1, в описании ошибки было указано, как установить необходимую версию.
	sudo gem install fast-stemmer -v '1.0.1'
	bundle install
Если ошибки не было, то выполняем следующие команды:
	rake install
	rake setup_github_pages
В этом моменте надо будет указать адрес репозитория на github, например: git@github.com:*username*/*username*.github.io.git

Блог создался, теперь можно сгененировать его из исходников:
	rake generate
Запустить локально (по-умолчанию он будет доступен по адресу http://localhost:4000):
	rake preview
Задеплоить на гитхаб:	
	rake deploy
	
### Настройка Octopress
#### Изменение названия и описание блога
Для изменения названия и описания можно отредактировать следующие строки в файле _config.yml:
	url: http://username.github.io
	title: Название блога
	subtitle: Подзаголовок блога
	author: Имя автора
	simple_search: http://google.com/search
	description: Описание блога

#### Русификация

### Добавление статей
Новая статья добавляется командой:
	rake new_post["Название новой статьи"]

#### Превью статьи на главной странице
Если статья длинная, то можно добавить кнопку "Читать дальше" после абзаца, для этого нужно изменить строку в файле _config.yml, указав в кавычках текст кнопки:
	excerpt_link: "Читать дальше &rarr;" 
В файле статьи, после абзаца нужно добавить строку:
	<!-- more -->
	
### Сохранение исходных файлов на github
Удобно хранить на гитхабе не только сгенерированный статический сайт, но и исходные фалов статей и настроек, чтобы иметь возможность редактировать блог на других компьютерах, да и просто иметь бэкап на всякий случай.
Нужно закоммитить изменения, с добавлением новых файлов (ключ -a) и отправить изменения в центральный репозитарий:
    git commit -a
    git push origin source
    
### Продолжение редактирования блога с другого компьютера
После того, как все исходные файлы блога стали храниться на гитхабе, можно клонировать репозиторий на другой компьютер, для этого достаточно выполнить:
    git clone git@github.com:vylgin/vylgin.github.io.git
Если нет доступа к гитхабу по ssh: 
    git clone https://github.com/vylgin/vylgin.github.io.git
Мы находимся в ветке *master*, в которой содержатся сгенерированные файлы блога, чтобы иметь возможность редактировать, необходимо переключиться в ветку *source*:
    git checkout source
После внесения изменений нужно не забыть сделать коммит и залить изменения на гитхаб:
    git commit -a
    git push origin source
    
### Настройка доступа к блогу по своему домену

### Возможные ошибки
У меня возникли проблемы с rake, при вызове команд появлялась ошибка:
	/usr/local/bin/rake:23:in `load': cannot load such file -- /usr/share/rubygems-integration/1.9.1/gems/rake-10.0.4/bin/rake (LoadError)
		from /usr/local/bin/rake:23:in `<main>'
Быстрым решением может быть вызов следущей команды:
	bundle exec rake generate

