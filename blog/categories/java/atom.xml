<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Категория: Java | vylgin]]></title>
  <link href="http://blog.vylgin.pro/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://blog.vylgin.pro/"/>
  <updated>2015-02-22T06:28:16-05:00</updated>
  <id>http://blog.vylgin.pro/</id>
  <author>
    <name><![CDATA[Виталий Вылгин]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Совместное использование Java и Javascript]]></title>
    <link href="http://blog.vylgin.pro/blog/2014/12/05/sovmiestnoie-ispol%27zovaniie-java-i-javascript/"/>
    <updated>2014-12-05T03:58:25-05:00</updated>
    <id>http://blog.vylgin.pro/blog/2014/12/05/sovmiestnoie-ispol'zovaniie-java-i-javascript</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_2014-12-05/1.jpg" width="150">
Javascript победил на фронтенде и завоевывает бекенд, а если добавить богатство библиотек языка Java, то можно получить любопытную смесь.</p>

<p>Поддержка динамических языков началась в java 6, когда был реализован стандарт JSR 223. Поддержка javascript осуществлялась с помощью <a href="https://developer.mozilla.org/ru/docs/Rhino" title="Rhino">Rhino</a>, но эта имплементация была очень медленной и в java 8 от нее отказались в пользу Nashorn.</p>

<!-- more -->


<h3>Nashorn</h3>

<ul>
<li>Javascript engine для jvm.</li>
<li>Полная java имплементация.</li>
<li>Полностью совместима с ecmascript 5.1</li>
<li>Полностью собирается в байткод, не интерпретируется</li>
</ul>


<h3>Примеры использования</h3>

<h4>В качестве системных скриптов.</h4>

<p>Создадим скрипт, который выводит текущий год, используя класс Date языка Java.</p>

<p>Создать файл <code>now_year.jjs</code>:</p>

<pre><code>#!/path_to_jdk8/bin/jjs

var Date = Java.type('java.util.Date');

var date = new Date();
date.year += 1900;

// Вывод с помощью javascript
print("javascript, print:");
print("Now year: " + date.year);

// Вывод с помощью java
var System = Java.type('java.lang.System');
System.out.println("\njava, System.out.println:");
System.out.println("Now year: " + date.year);
</code></pre>

<p>Сделаем исполняемым, выполнив в консоле команду:</p>

<pre><code>    chmod +x now_year.jjs
</code></pre>

<p>Запустим скрипт:</p>

<pre><code>    /now_year.jjs
</code></pre>

<p>Видим результат:</p>

<pre><code>    javascript, print:
    Now year: 2014

    java, System.out.println:
    Now year: 2014
</code></pre>

<h4>Добавление javascript в java код</h4>

<p>Пример из статьи на хабре <a href="http://habrahabr.ru/post/195870">Введение в Nashorn</a>.</p>

<pre><code>import javax.script.*;

public class EvalScript {
    public static void main(String[] args) throws Exception {
        // create a script engine manager
        ScriptEngineManager factory = new ScriptEngineManager();
        // create a Nashorn script engine
        ScriptEngine engine = factory.getEngineByName("nashorn");
        // evaluate JavaScript statement
        try {
            engine.eval("print('Hello, World!');");
        } catch (final ScriptException se) { se.printStackTrace(); }
    }
}
</code></pre>

<p>Компилируем класс:</p>

<pre><code>./javac EvalScript.java 
</code></pre>

<p>И выполняем его:</p>

<pre><code>./java EvalScript
</code></pre>

<p>Видим вывод:</p>

<pre><code>Hello, World!
</code></pre>

<h4>Расширение функциональности приложения в рантайме</h4>

<p>Пример из статьи на хабре <a href="http://habrahabr.ru/post/195870">Введение в Nashorn</a>.</p>

<p><strong>MyScript.js</strong></p>

<pre><code>var MyClass = Java.type("EvalScript.MyClass");
var my = new MyClass();
my.printMsg("Hello!");
</code></pre>

<p><strong>EvalScript.java</strong></p>

<pre><code>import javax.script.*;
import java.io.*;

public class EvalScript {

    public static void main(String[] args) throws Exception {
        // create a script engine manager
        ScriptEngineManager factory = new ScriptEngineManager();
        // create a Nashorn script engine
        ScriptEngine engine = factory.getEngineByName("nashorn");
        // evaluate JavaScript statement
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            engine.eval(br);
        } catch (final ScriptException se) { se.printStackTrace(); }
    }

    public static class MyClass {
        public void printMsg(String msg) {
            System.out.println("printMsg : "+msg);
        }
    }
}
</code></pre>

<p>Скомпилировав, запускаем:</p>

<pre><code>./java EvalScript &lt; MyScript.js
</code></pre>

<p>Видим вывод:</p>

<pre><code>printMsg : Hello!
</code></pre>

<h3>Зачем это нужно?</h3>

<p>Да хотя бы просто так, занять себя в один из вечеров.</p>

<h3>Ссылки</h3>

<ul>
<li><a href="http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html">http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html</a></li>
<li><a href="http://www.infoworld.com/article/2607426/application-development/nashorn--javascript-made-great-in-java-8.html">http://www.infoworld.com/article/2607426/application-development/nashorn&mdash;javascript-made-great-in-java-8.html</a></li>
<li><a href="https://github.com/gAmUssA/java-scripting-experiments">https://github.com/gAmUssA/java-scripting-experiments</a></li>
<li><a href="https://speakerdeck.com/vikgamov/nosoroghi-na-volie-prikladnyie-vozmozhnosti-ispol-zovaniia-javascript-v-razrabotkie-na-java">https://speakerdeck.com/vikgamov/nosoroghi-na-volie-prikladnyie-vozmozhnosti-ispol-zovaniia-javascript-v-razrabotkie-na-java</a></li>
<li><a href="http://habrahabr.ru/post/195870/">http://habrahabr.ru/post/195870</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тестовое задание по Oracle ADF]]></title>
    <link href="http://blog.vylgin.pro/blog/2014/07/29/tiestovoie-zadaniie-po-oracle-adf/"/>
    <updated>2014-07-29T02:10:05-04:00</updated>
    <id>http://blog.vylgin.pro/blog/2014/07/29/tiestovoie-zadaniie-po-oracle-adf</id>
    <content type="html"><![CDATA[<p>Полтора года назад я проходил собеседование в одной фирме на позицию &ldquo;Java Developer&rdquo;, в которой дали тестовое задание по технологиям Oracle ADF и Oracle DB.</p>

<h3>Задание</h3>

<p>В БД (Oracle) две таблички(связь один-ко-многим):
книга (может быть несколько книг, с одинаковым автором). Поля: название книги, дата выпуска, автор
автор. Поля: Фамилия, Имя, Отчество, Дата рождения</p>

<p>В программе должна быть возможность:</p>

<ol>
<li>получения всех книг конкретного автора</li>
<li>получение книг, выпущенных за определенный интервал</li>
<li>посредством вызова веб-сервиса(веб сервис в этом же приложении), осуществлять подгрузку фото книг.</li>
</ol>


<h3>Решение</h3>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/hzqDaC_AOOI" allowfullscreen></iframe></div></p>

<p>Исходники на GitHub: <a href="https://github.com/vylgin/OracleADFTestTask">https://github.com/vylgin/OracleADFTestTask</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Database и хранимые процедуры на языке Java]]></title>
    <link href="http://blog.vylgin.pro/blog/2014/02/03/oracle-database-i-khranimyie-protsiedury-na-iazykie-java/"/>
    <updated>2014-02-03T14:19:47-05:00</updated>
    <id>http://blog.vylgin.pro/blog/2014/02/03/oracle-database-i-khranimyie-protsiedury-na-iazykie-java</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_2/java_oracle_logo.jpg">
В БД Oracle можно использовать хранимые процедуры и хранимые функции на языке Java благодаря встроенной JVM. С помощью них можно выполнять те задачи, с которыми не справляется PL/SQL, например, если необходимо обеспечить взаимодействие с операционной системой.</p>

<p>Для создания хранимой процедуры нужно выполнить три действия:</p>

<ol>
<li>Создать исходный код с хранимой процедурой на языке Java.</li>
<li>Загрузить скомпилированный код в Oracle.</li>
<li>Создать псевдоним хранимой процедуры на PL/SQL.</li>
</ol>


<p>Рассмотрим каждое из них.</p>

<!-- more -->


<h4>1. Создание исходного кода хранимой процедуры на языке Java</h4>

<p>Для создания хранимой процедуры или функции на языке Java, нужно создать класс, в нем определить публичный статический метод, от возвращаемого значения которого зависит будет ли это метод хранимой процедурой или хранимой функцией.</p>

<p><code>public static void procedure() { }</code> &ndash; хранимая процедура.</p>

<p><code>public static int function() { return -1; }</code> &ndash; хранимая функция.</p>

<p>Для использования IN параметра, нужно в статический метод передать ссылку на объект.</p>

<pre><code>public static void procedure(String str) { }
</code></pre>

<p>Для использования OUT или IN OUT параметра, нужно передать ссылку на массив.</p>

<pre><code>public static void procedure(String[] str) {}
</code></pre>

<h4>2. Загрузка скомпилированного кода в Oracle</h4>

<p>Загрузить созданный класс можно с помощью командной строки:</p>

<pre><code>javac Swapper.java
$ loadjava -user username/password Swapper.class
</code></pre>

<p>Я использовал Oracle SQL Developer и с помощью него загружал файл с исходным кодом:</p>

<p><img class="center" src="/images/post_2/img_2.png"></p>

<h4>3. Создание псевдонима хранимой процедуры на PL/SQL</h4>

<p>Псевдоним на PL/SQL для Java кода можно создать по шаблону</p>

<pre><code>CREATE OR REPLACE PROCEDURE имя_процедуры (x IN NUMBER, y IN OUT NUMBER)
AS LANGUAGE JAVA
NAME 'ИмяКласса.название_метода(int[], int[])';
</code></pre>

<h3>Пример создания хранимой процедуры.</h3>

<p>Рассмотрим пример хранимой процедуры для обмена значений двух целочисленных переменных.</p>

<ol>
<li><p>Создадим класс и статический метод для хранимой процедуры:</p>

<pre><code> public class Swapper {
   public static void swap (int[] x, int[] y) {
     int tmp = x[0];
     x[0] = y[0];
     y[0] = tmp;
   }
 }
</code></pre></li>
<li><p>Скомпилируем и загрузим класс в Oracle Database:</p>

<pre><code> javac Swapper.java
 $ loadjava -user username/password Swapper.class
</code></pre></li>
<li><p>Создадим псевдоним хранимой процедуры на PS/SQL:</p>

<pre><code> CREATE OR REPLACE PROCEDURE swap (x IN OUT NUMBER, y IN OUT NUMBER)
 AS LANGUAGE JAVA
 NAME 'Swapper.swap(int[], int[])';
</code></pre></li>
<li><p>Проверим работу созданной процедуры:</p>

<pre><code> SET SERVEROUTPUT ON
 declare
    a number := 5;
    b number := 3;
 begin
    swap(a, b);
    dbms_output.put_line(a || ' ' || b);
 end;
 /
</code></pre>

<p> Убедимся, что на выводе отобразилось <code>3 5</code>.</p></li>
</ol>


<h3>Вывод отладочной информации в dbms</h3>

<p>Вывод отладочной информации с использованием <code>System.out.println("Отладочное сообщение")</code> не работает в хранимых процедурах, нужно подключиться к dbms текущего коннекта, для этого можно написать собственный метод:</p>

<pre><code>private static void log(String s) {
    try {
        PreparedStatement ps = new OracleDriver()
                    .defaultConnection()
                    .prepareStatement("begin dbms_output.put_line(:x); end;");
        ps.setString(1, s);
        ps.execute();
        ps.close();
    } catch (SQLException e) {
        // Обработка исключения
    }
}
</code></pre>

<h4>Пример хранимой процедуры с выводом отладочной информации</h4>

<ol>
<li><p>Создание Java-кода:</p>

<pre><code> import java.sql.*;
 import oracle.jdbc.*;

 public class Example {

     public static void example (int x) {
         int z = x + 1;
         log("z = " + z);
     }

     private static void log(String s) {
         try {
             PreparedStatement ps = new OracleDriver()
                         .defaultConnection()
                         .prepareStatement("begin dbms_output.put_line(:x); end;");
             ps.setString(1, s);
             ps.execute();
             ps.close();
         } catch (SQLException e) {
             // Обработка исключения
         }
     }
 }
</code></pre></li>
<li><p>Компилирование и загрузка Java-кода в Oracle Database:</p>

<pre><code> javac Example.java
 $ loadjava -user username/password Example.class
</code></pre></li>
<li><p>Создание псевдонима хранимой процедуры на PL/SQL:</p>

<pre><code> CREATE OR REPLACE PROCEDURE example (x IN NUMBER)
 AS LANGUAGE JAVA
 NAME 'Example.example(int)';
</code></pre></li>
<li><p>Проверка выполнения хранимой процедуры:</p>

<pre><code> SET SERVEROUTPUT ON
 declare
    a number := 5;
 begin
    example(a);
 end;
 /
</code></pre>

<p> Вывод:</p>

<pre><code> z = 6
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
